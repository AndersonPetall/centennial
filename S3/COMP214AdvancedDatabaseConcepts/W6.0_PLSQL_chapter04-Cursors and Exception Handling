Cursor
  Implicit Cursor
  Explicit Cursor 
    without FOR LOOP
      DECLARE
      OPEN
      FETCH
      CLOSE
    with FOR LOOP
      Handles tasks automatically for processing each row returned by a cursor (record declaration, fetch, ending loop)
      For循环会自动打开游标，关闭游标，并且自动会让游标指向一条记录(https://zhuanlan.zhihu.com/p/512772381)
Exception Handling
  Predefined Oracle Errors
    NO_DATA_FOUND / TOO_MANY_ROWS / CASE_NOT_FOUND / ZERO_DIVIDE / DUP_VAL_ON_INDEX
  Undefined Error
    行为违反了oracle的规则，有报错编号和报错信息，但是系统并未定义异常名称，那么我们自己将这种错误定义一个名字，并将名字和错误号绑定。
  User-Defined Exception
  Additional
    WHEN OTHERS: traps all errors not specifically addressed
    SQLCODE:  error code
    SQLERRM:  error message

https://zhuanlan.zhihu.com/p/512772381
https://blog.csdn.net/qq_36743482/article/details/79354036


EG: Explicit Cursor without FOR LOOP
  DECLARE
    CURSOR cur IS SELECT col1,col2 from bb_table where col1 = 7;
    TYPE type_bas IS RECORD(
      col1 bb_table.col1%type, col2 bb_table.col2%type
    );
    one_bas type_bas;
    rate NUMBER;
  BEGIN
    OPEN cur;
      LOOP
        FETCH cur INTO one_bas;
        EXIT WHEN cur%NOTFOUND;
        IF one_bas.col1 = 1 THEN rate = 10; END IF;
        IF one_bas.col1 = 2 THEN rate = 20; END IF;
      END LOOP;
    CLOSE cur;
  END;

EG: Explicit Cursor with FOR LOOP(with cursor)
  DECLARE
    CURSOR cur IS SELECT col1,col2 from bb_table where col1 = 7;
    rate NUMBER;
  BEGIN
    FOR col3 IN cur LOOP
      IF cur.col1 = 'C' THEN rate:= cur.col2*2;
      ELSIF cur.col2 = 'D' THEN rate:=cur.col2*3; 
      END IF;
      UPDATE bb_table SET col3 = rate WHERE CURRENT OF cur;
    END LOOP;
    COMMIT;
  END;
EG: Explicit Cursor with FOR LOOP(without cursor)
  DECLARE
    rate NUMBER;
  BEGIN
    FOR col3 IN (SELECT col1,col2 from bb_table where col1 = 7) LOOP
      IF col1 = 'C' THEN rate:= cur.col2*2;
      ELSIF col2 = 'D' THEN rate:=cur.col2*3; 
      END IF;
    END LOOP;
  END;
  
EG: Cursor with Parameters
  DECLARE
    CURSOR cur(col1 NUMBER, col2 VARCHAR(2)) IS SELECT col3, col4 FROM bb_table where col3 = col1 and col4 = col2;
    TYPE type_basket IS RECORD(
    col3 bb_table.col3%TYPE;
    col4 bb_table.col4%TYPE;
    );
    one type_basket;
  BEGIN
    FOR one IN cur(col1_value1, col2_value1) LOOP
      DBMS_OUTPUT.PUT_LINE(one.col3||one.col4);
    END LOOP;
    FOR one IN cur(col1_value2, col2_value2) LOOP
      DBMS_OUTPUT.PUT_LINE(one.col3||one.col4);
    END LOOP;
  END;
EG: Cursor with Parameters
  DECLARE
    CURSOR cur(col1 NUMBER, col2 VARCHAR(2)) IS SELECT col3, col4 FROM bb_table where col3 = col1 and col4 = col2;
  BEGIN
    OPEN cur(40, 'name1')
    ...
    COLSE cur;
    OPEN cur(50, 'name2')
    ...
    COLSE cur;
  END;
  
EG: Cursor Variables with REF CURSOR
  DECLARE
    CURSOR cur SYS_REFCURSOR;
    row1 table1%ROWTYPE;
    row2 table2%TOWTYPE;
    id NUMBER :=1; num NUMBER :=3;
  BEGIN
    IF id = 1 THEN
      OPEN cur FOR SELECT * from table1 where col1 = num;
      LOOP 
        FETCH cur INTO row1; 
        EXIT WHEN cur%NOTFOUND
        DBMS_OUTPUT.PUT_LINE(row1.col1);
      END LOOP;
    ELSIF id = 2 THEN
      OPEN cur FOR SELECT * from table2 where col1 = num;
      LOOP 
        FETCH cur INTO row2; 
        EXIT WHEN cur%NOTFOUND
        DBMS_OUTPUT.PUT_LINE(row2.col1);
      END LOOP;
    END IF;
  END;
  
  
  
  

EG: Exception Handling - Predefined Oracle Errors
  DECLARE
    col table1.col1%type;
  BEGIN
    SELECT col1 INTO col FROM table1 where id = 1;
    DBMS_OUTPUT.PUT_LINE(col);
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('can not found data at that condition');
    WHEN TOO_MANY_ROWS THEN 
      DBMS_OUTPUT.PUT_LINE('too many data at that condition');
      DBMS_OUTPUT.PUT_LINE('please be specify');
  END;
  
EG: Exception Handling - Undefined Error
  DECLARE
    ex_name1 EXCEPTION;
    PRAGRAM EXCETPTION_INIT(ex_name1, -20274);  --当错误为-20274的时候,定义错误为ex_name1
  BEGIN
    DELETE FROM table1 where id = 1;
  EXCEPTION
    WHEN ex_name1 THEN
      DBMS_OUTPUT.PUT_LINE('error message');
  END;
EG: Exception Handling - Undefined Error
  DECLARE
    ex_name1 EXCEPTION;
    PRAGMA EXCEPTION_INIT(ex_name1, -20274); 
  BEGIN
    DELETE FROM table1 where id = 1;
    IF SQL%NOTFOUND THEN RAISE ex_name1; ENDIF;
    COMMIT;
  EXCEPTION
    WHEN ex_name1 THEN
      DBMS_OUTPUT.PUT_LINE('error message');
  END;
  
  
EG: Exception Handling - User-Defined Exception
  DECLARE
    ex1 EXCEPTION;
  BEGIN
    UPDATE table SET col1 = 1 WHERE id = 77;
    IF SQL%NOTFOUND THEN RAISE ex1;
    ELSE DBMS_OUTPUT.PUT_LINE('not exception');
    END IF;
  EXCEPTION
    WHEN ex1 THEN
      DBMS_OUTPUT.PUT_LINE('invalid ID');
  END;
  
  
EG: Exception Handling - Additional(OTHERS,SQLCODE,SQLERRM)
  DECLARE
    num1 NUMBER :=1; num2 NUMBER :=2; num3 NUMBER :=3;
  BEGIN
    INSERT INTO table(col1,col2,col3) VALUES(num1,num2,num3);
    IF SQL%FOUND THEN DBMS_OUTPUT.PUT_LINE('successful'); COMMIT;
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('fail');
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('error code'||SQLCODE);
      DBMS_OUTPUT.PUT_LINE('error message'||SQLERRM);
  END;
  
  
