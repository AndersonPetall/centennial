4-1 Using an Explicit Cursor
Require: whether item in stock (comparing the item quantity with the product stock amount)
Condition: (entered idbasket(idbasket == 6))
From: BB_BASKETITEM, BB_PRODUCT

DECLARE
  CURSOR onecursor IS 
    SELECT idbasket, quantity, stock FROM bb_basketitem 
    JOIN bb_product USING(idproduct) WHERE idbasket = 6;
  TYPE typebas IS RECORD(
    id bb_basketitem.idbasket%type,
    quantity bb_basketitem.quantity%type,
    stock bb_product.stock%type
  );
  onebas typebas;
  flag char(1) := 'Y';
BEGIN 
  OPEN onecursor;
  LOOP
    FETCH onecursor INTO onebas;
      EXIT WHEN onecursor%NOTFOUND;
      IF onebas.stock < onebas.quantity THEN flag := 'N'; END IF;
  END LOOP;
  CLOSE onecursor;
  IF flag = 'Y' THEN DBMS_OUTPUT.PUT_LINE('All items in stock!');
   ELSE DBMS_OUTPUT.PUT_LINE('All items NOT in stock!'); 
  END IF;
END;



4-2 Using a CURSOR FOR Loop
Require: update one column(promo) in table depend on total purchased (quantity * price)
Condition: promo = 'A' when purchased > 100, promo = 'B' when 50<=purchased<=99
From: BB_BASKETITEM(purchased), BB_PRODUCT(purchased), BB_SHOPPER(promo)

edition - self
DECLARE
  CURSOR cur IS SELECT a.idshopper, a.promo, b.total FROM bb_shopper a,(SELECT c.idshopper, 
  SUM(d.quantity*d.price) total from bb_basketitem d, bb_basket c WHERE c.idbasket = d.idbasket group by idshopper) b 
  WHERE a.idshopper = b.idshopper FOR  UPDATE OF a.idshopper NOWAIT;
BEGIN
  FOR shopper IN cur LOOP
    IF shopper.total > 100 THEN UPDATE bb_shopper SET promo = 'A' WHERE CURRENT OF cur; END IF;
    IF shopper.total >=50 AND shopper.total <= 99  THEN UPDATE bb_shopper SET promo = 'B' WHERE CURRENT OF cur; END IF;
  END LOOP;
  COMMIT;
END;

edition - book
DECLARE
  CURSOR cur IS SELECT a.idshopper, a.promo, b.total FROM bb_shopper a,(SELECT c.idshopper, 
  SUM(d.quantity*d.price) total from bb_basketitem d, bb_basket c WHERE c.idbasket = d.idbasket group by idshopper) b 
  WHERE a.idshopper = b.idshopper FOR  UPDATE OF a.idshopper NOWAIT;
  promotxt CHAR(1) := 'X';
BEGIN
  FOR shopper IN cur LOOP
    IF shopper.total > 100 THEN promotxt := 'A'; END IF;
    IF shopper.total BETWEEN 50 AND 99 THEN promotxt := 'B'; END IF;
    IF promotxt <> 'X' THEN UPDATE bb_shopper SET promo = promotxt WHERE CURRENT OF cur; END IF;
  END LOOP;
  COMMIT;
END;



4-3 Using Implicit Cursors
Require: modify anonymous block to show the number of rows updated
Condition: 
From: BB_SHOPPER(promo)

normal:
UPDATE bb_shopper SET promo = NULL;
anonymous block:
BEGIN
 UPDATE bb_shopper SET promo = NULL WHERE promo IS NOT NULL;
END;
modify:
DECLARE
  i NUMBER;
BEGIN 
  UPDATE bb_shopper SET promo = 'B' WHERE idshopper IN (21,23,25);
  i := SQL%rowcount;
  COMMIT;
  DBMS_OUTPUT.PUT_LINE('number of rows updated  '||i); 
END;




4-4 Using Exception Handling
Require: modify a case PLSQL 
Condition: 
From: 

original:
DECLARE
  lv_tax_num NUMBER(2,2);
BEGIN
 CASE  'NJ' 
  WHEN 'VA' THEN lv_tax_num := .04;
  WHEN 'NC' THEN lv_tax_num := .02;  
  WHEN 'NY' THEN lv_tax_num := .06;  
 END CASE;
 DBMS_OUTPUT.PUT_LINE('tax rate = '||lv_tax_num);
END;
modify:
DECLARE
  lv_tax_num NUMBER(2,2);
BEGIN
 CASE  'NJ' 
  WHEN 'VA' THEN lv_tax_num := .04;
  WHEN 'NC' THEN lv_tax_num := .02;  
  WHEN 'NY' THEN lv_tax_num := .06;  
 END CASE;
 DBMS_OUTPUT.PUT_LINE('tax rate = '||lv_tax_num);
EXCEPTION
  WHEN CASE_NOT_FOUND THEN DBMS_OUTPUT.PUT_LINE('case not found');
END;


4-5 Handling Predefined Exceptions
Require: modify a SELECT PLSQL 
Condition: 
From:

original:
DECLARE
 rec_shopper bb_shopper%ROWTYPE;
BEGIN
 SELECT * INTO rec_shopper FROM bb_shopper WHERE idShopper = lv_shopper_num;
END;
modify:
DECLARE
 rec_shopper bb_shopper%ROWTYPE;
 lv_shopper_num NUMBER := 9999;
BEGIN
 SELECT * INTO rec_shopper FROM bb_shopper WHERE idShopper = lv_shopper_num;
EXCEPTION
  WHEN NO_DATA_FOUND THEN DBMS_OUTPUT.PUT_LINE('Invalid shopper ID');
END;




4-6 Handling Exceptions with Undefined Errors
Require: modify a INSERT PLSQL (voilate the check constraint)
Condition: 
From: 

original:
ALTER TABLE bb_basketitem ADD CONSTRAINT bitems_qty_ck CHECK (quantity < 20);
BEGIN
  INSERT INTO bb_basketitem VALUES (88,8,10.8,21,16,2,3);
END;
modify:
ALTER TABLE bb_basketitem ADD CONSTRAINT bitems_qty_ck CHECK (quantity < 20);
DECLARE
  violated EXCEPTION;
  PRAGMA EXCEPTION_INIT(violated, -02290); 
BEGIN
  INSERT INTO bb_basketitem VALUES (88,8,10.8,21,16,2,3);
  IF SQL%NOTFOUND THEN RAISE violated; END IF;
EXCEPTION
  WHEN violated THEN DBMS_OUTPUT.PUT_LINE('Check Quantity');
END;



4-7 Handling Exceptions with User-Defined Errors
Require: 
Condition: 
From: 

original:
ALTER TABLE bb_basketitem ADD CONSTRAINT bitems_qty_ck CHECK (quantity < 20);
BEGIN
  INSERT INTO bb_basketitem VALUES (88,8,10.8,21,16,2,3);
END;
modify:
ALTER TABLE bb_basketitem ADD CONSTRAINT bitems_qty_ck CHECK (quantity < 20);
DECLARE
  violated EXCEPTION;
  PRAGMA EXCEPTION_INIT(violated, -02290); 
BEGIN
  INSERT INTO bb_basketitem VALUES (88,8,10.8,21,16,2,3);
  IF SQL%NOTFOUND THEN RAISE violated; END IF;
EXCEPTION
  WHEN violated THEN DBMS_OUTPUT.PUT_LINE('Check Quantity');
END;



4-8 Using an Explicit Cursor
Require: 
Condition: 
From: 

original:
ALTER TABLE bb_basketitem ADD CONSTRAINT bitems_qty_ck CHECK (quantity < 20);
BEGIN
  INSERT INTO bb_basketitem VALUES (88,8,10.8,21,16,2,3);
END;
modify:
ALTER TABLE bb_basketitem ADD CONSTRAINT bitems_qty_ck CHECK (quantity < 20);
DECLARE
  violated EXCEPTION;
  PRAGMA EXCEPTION_INIT(violated, -02290); 
BEGIN
  INSERT INTO bb_basketitem VALUES (88,8,10.8,21,16,2,3);
  IF SQL%NOTFOUND THEN RAISE violated; END IF;
EXCEPTION
  WHEN violated THEN DBMS_OUTPUT.PUT_LINE('Check Quantity');
END;
