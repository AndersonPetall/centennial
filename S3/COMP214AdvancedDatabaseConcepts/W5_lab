3-1
Require: data, shipper, shipping number
Condition: IDSTAGE == 5 && (entered basket_number(idbasket == 3))
From: BB_BASKETSTATUS 

DECLARE
  lv_ship_date bb_basketstatus.dtstage%TYPE;
  lv_shipper_txt bb_basketstatus.shipper%TYPE;
  lv_ship_num bb_basketstatus.shippingnum%TYPE;
  lv_bask_num bb_basketstatus.idbasket%TYPE := 3;
BEGIN
  SELECT dtstage, shipper, shippingnum
   INTO lv_ship_date, lv_shipper_txt, lv_ship_num
   FROM bb_basketstatus
   WHERE idbasket = lv_bask_num
    AND idstage = 5;
  DBMS_OUTPUT.PUT_LINE('Date Shipped: '||lv_ship_date);
  DBMS_OUTPUT.PUT_LINE('Shipper: '||lv_shipper_txt);
  DBMS_OUTPUT.PUT_LINE('Shipping #: '||lv_ship_num);
END;



3-2
Require: all shipping information
Condition: IDSTAGE == 5 && (entered basket_number(idbasket == 3))
From: BB_BASKETSTATUS 
Key: %ROWTYPE

DECLARE
  rec_ship bb_basketstatus%ROWTYPE;
  lv_bask_num bb_basketstatus.idbasket%TYPE := 3;
BEGIN
  SELECT *
   INTO rec_ship
   FROM bb_basketstatus
   WHERE idbasket =  lv_bask_num
    AND idstage = 5;
  DBMS_OUTPUT.PUT_LINE('Date Shipped: '||rec_ship.dtstage);
  DBMS_OUTPUT.PUT_LINE('Shipper: '||rec_ship.shipper);
  DBMS_OUTPUT.PUT_LINE('Shipping #: '||rec_ship.shippingnum);
  DBMS_OUTPUT.PUT_LINE('Notes: '||rec_ship.notes);
END;


3-3
Require: ｃlassification according to total purchases
Condition: (entered basket_number(idshopper == 22))
From: bb_basket 
Key: IF THEN

DECLARE
 lv_total_num NUMBER(6,2);
 lv_rating_txt VARCHAR2(4);
 lv_shop_num bb_basket.idshopper%TYPE := 22;
BEGIN
 SELECT SUM(total) INTO lv_total_num
  FROM bb_basket
  WHERE idShopper = lv_shop_num AND orderplaced = 1
  GROUP BY idshopper;
  IF lv_total_num > 200 THEN lv_rating_txt := 'HIGH';
  ELSIF lv_total_num > 100 THEN lv_rating_txt := 'MID';
  ELSE lv_rating_txt := 'LOW';
  END IF; 
   DBMS_OUTPUT.PUT_LINE('Shopper '||lv_shop_num||' is rated '||lv_rating_txt);
END;


3-4
Require: ｃlassification according to total purchases
Condition: (entered basket_number(idshopper == 22))
From: bb_basket 
Key: searched CASE

DECLARE
 lv_total_num NUMBER(6,2);
 lv_rating_txt VARCHAR2(4);
 lv_shop_num bb_basket.idshopper%TYPE := 22;
BEGIN
 SELECT SUM(total) INTO lv_total_num
  FROM bb_basket
  WHERE idShopper = lv_shop_num AND orderplaced = 1
  GROUP BY idshopper;
  CASE 
  WHEN lv_total_num > 200 THEN lv_rating_txt := 'HIGH';
  WHEN lv_total_num > 100 THEN lv_rating_txt := 'MID';
  ELSE lv_rating_txt := 'LOW';
  END CASE;
  --IF lv_total_num > 200 THEN lv_rating_txt := 'HIGH';
  --ELSIF lv_total_num > 100 THEN lv_rating_txt := 'MID';
  --ELSE lv_rating_txt := 'LOW';
  --END IF; 
   DBMS_OUTPUT.PUT_LINE('Shopper '||lv_shop_num||' is rated '||lv_rating_txt);
END;




3-5
Require: quantity of product can be purchased by certain amount
Condition: (entered productid(idshopper == 4) && entered amount(amount = 100))
From: BB_PRODUCT 
Key: WHILE LOOP

DECLARE
  productid BB_PRODUCT.idproduct%type:= 4;
  total NUMBER:= 100;
  singleprice BB_PRODUCT.price%TYPE;
  quantity NUMBER(3):=0;
  totalspend NUMBER(5,2):=0;
BEGIN
  SElECT price into singleprice  from BB_PRODUCT WHERE idProduct = productid;
  WHILE singleprice < (total-totalspend)LOOP
  quantity:=quantity+1;
  totalspend:=quantity*singleprice;
  END LOOP;
  DBMS_OUTPUT.PUT_LINE('quantity = ' || quantity);
  DBMS_OUTPUT.PUT_LINE('total spend = ' || totalspend);
  DBMS_OUTPUT.PUT_LINE('product id = ' || productid);
END;




3-6
Require: ｃlassification according to quantity
Condition: (entered idbasket(idbasket == 5/12))
From: bb_basket 
Key: IF ELSIF ELSE
PS: local variable 和 select variable 可以同名

DECLARE
  id bb_basket.idbasket%TYPE := 5;
  quantity number;
  cost number(5,2);
BEGIN
  SELECT quantity INTO quantity from bb_basket WHERE  idbasket = id;
  IF quantity > 10 THEN cost := 12;
    ELSIF quantity >=7 THEN cost := 10;
    ELSIF quantity >=4 THEN cost := 7.5;
    ELSE cost := 5;
  END IF;
  DBMS_OUTPUT.PUT_LINE('basket id = '||id);
  DBMS_OUTPUT.PUT_LINE('basket quantity = '||quantity);
  DBMS_OUTPUT.PUT_LINE('basket cost = '||cost);
END;




3.7
Require: list of information
Condition: (entered idbasket(idbasket == 12))
From: bb_basket 
Key: RECORD
PS: to_char()使用  to_char(ship, '$99.99')==>$3.26

WAY_1: 分开写法
DECLARE
 id bb_basket.idbasket%TYPE := 12;
 basket bb_basket.idbasket%TYPE;
 sub bb_basket.subtotal%TYPE;
 ship bb_basket.shipping%TYPE;
 tax bb_basket.tax%TYPE;
 total bb_basket.total%TYPE;
BEGIN
 SELECT idbasket, subtotal, shipping, tax, total
 INTO basket, sub, ship, tax, total FROM bb_basket WHERE idbasket = id;
dbms_output.put_line('Basket ' || basket || ' has a subtotal of' || to_char(sub, '$99.99')
|| ', shipping is' || to_char(ship, '$99.99') || ',' || chr(10) || 'tax is'
|| to_char(tax, '$99.99') || ', and the total is' || to_char(total, '$99.99'));
end;

WAY_2: record写法
DECLARE 
 ID BB_BASKET.IDBASKET%TYPE := 12;
 TYPE inforlist IS RECORD(
   id BB_BASKET.IDBASKET%TYPE,
   sub BB_BASKET.SUBTOTAL%TYPE,
   ship BB_BASKET.SHIPPING%TYPE, 
   tax BB_BASKET.TAX%TYPE,
   total BB_BASKET.TOTAL%TYPE);
 infor inforlist;
BEGIN
 SELECT idbasket, subtotal, shipping, tax, total INTO infor FROM bb_basket WHERE idbasket = ID;
 dbms_output.put_line('Basket ' || infor.id || ' has a subtotal of' || to_char(infor.sub, '$99.99')
|| ', shipping is' || to_char(infor.ship, '$99.99') || ',' || chr(10) || 'tax is'
|| to_char(infor.tax, '$99.99') || ', and the total is' || to_char(infor.total, '$99.99'));
END;
 

